from machine import Pin, ADC
import neopixel
import time
import dht
from umqtt.simple import MQTTClient

# Pin Definitions
SOIL_MOISTURE_PIN = 5
DHT22_PIN = 15
LDR_PIN = 4
PUMP_PIN = 12  
NEOPIXEL_PIN = 4  
MAIN_POWER_PIN = 39  
EXT_POWER_PIN = 38  

# Setup
soil_moisture_sensor = ADC(Pin(SOIL_MOISTURE_PIN))
soil_moisture_sensor.atten(ADC.ATTN_11DB)  
dht22_sensor = dht.DHT22(Pin(DHT22_PIN))
ldr = ADC(Pin(LDR_PIN))
ldr.atten(ADC.ATTN_11DB)  
ldr.width(ADC.WIDTH_12BIT)  

# Relay Setup
main_power_relay = Pin(MAIN_POWER_PIN, Pin.OUT)
ext_power_relay = Pin(EXT_POWER_PIN, Pin.OUT)
pump_relay = Pin(PUMP_PIN, Pin.OUT)

# NeoPixel Setup
np = neopixel.NeoPixel(Pin(NEOPIXEL_PIN), 12)
brightness = 127  

# MQTT Setup
MQTT_BROKER = "your_mqtt_broker_address"  
MAINPOWER_STATUS_TOPIC = "mainpower_status"
PUMP_CONTROL_TOPIC = "pump_control"
LED_CONTROL_TOPIC = "led_control"
SOIL_MOISTURE_TOPIC = "sensor/soil_moisture"
DHT22_TOPIC = "sensor/dht22"
LDR_TOPIC = "sensor/ldr"
WATER_DENSITY_TOPIC = "water_density"  
TARGET_LIGHT_TOPIC = "target_light"  
LIGHT_SCALE_TOPIC = "light_scale"  
PUMP_MODE_TOPIC = "pump_mode"  # auto
LIGHT_MODE_TOPIC = "light_mode" 
MANUAL_PUMP_TOPIC = "manual_pump"  # manual
MANUAL_LIGHT_TOPIC = "manual_light"  

client = MQTTClient("esp32_client", MQTT_BROKER)

# Global Variables
target_light = 500  
light_scale = 1.0  
pump_mode = "auto"
light_mode = "auto"
manual_pump = False
manual_light = False
mainpower_status = None  # Last message from mainpower_status topic

min_value = 4095
max_value = 0
min_count = 0
max_count = 0
CONFIRM_COUNT = 3
bright_level = 127

# Functions for relay control
def update_min_max(ldr_value):
    global min_value, max_value, min_count, max_count

    if ldr_value < min_value:
        min_count += 1
        if min_count >= CONFIRM_COUNT:
            min_value = ldr_value
            min_count = 0
    else:
        min_count = 0  

    if ldr_value > max_value:
        max_count += 1
        if max_count >= CONFIRM_COUNT:
            max_value = ldr_value
            max_count = 0
    else:
        max_count = 0
        
def find_ldr_value(ldr_value):
    global min_value, max_value
    return int(100 - ((ldr_value - min_value) * 100 / (max_value - min_value)))

def adjust_brightness(preferred_light, current_light):
    global bright_level
    while current_light != preferred_light:
        if current_light > preferred_light and bright_level != 0:
            bright_level -= 1
        elif current_light < preferred_light and bright_level != 255:
            bright_level += 1
        np.fill((bright_level, bright_level, bright_level))
        np.write()
        time.sleep(0.05)

def read_moisture():
    value = soil_moisture_sensor.read()
    return (4095 - value) * 100 // 4095  

def read_ldr():
    return ldr.read()

def mqtt_callback(topic, msg):
    global target_light, light_scale, pump_mode, light_mode, manual_pump, manual_light, mainpower_status
    msg = msg.decode()
    if topic == MAINPOWER_STATUS_TOPIC:
        mainpower_status = int(msg)
        # Auto-switch logic between main power and external power
        if 210 <= mainpower_status <= 230:
            main_power_relay.on()
            ext_power_relay.off()
        else:
            main_power_relay.off()
            ext_power_relay.on()
    elif topic == PUMP_MODE_TOPIC:
        pump_mode = msg
    elif topic == LIGHT_MODE_TOPIC:
        light_mode = msg
    elif topic == MANUAL_PUMP_TOPIC:
        manual_pump = msg.lower() == 'on'
    elif topic == MANUAL_LIGHT_TOPIC:
        manual_light = msg.lower() == 'on'
    elif topic == TARGET_LIGHT_TOPIC:
        target_light = int(msg)
    elif topic == LIGHT_SCALE_TOPIC:
        light_scale = float(msg)

# Initialize MQTT
try:
    client.set_callback(mqtt_callback)
    client.connect()
    client.subscribe(MAINPOWER_STATUS_TOPIC)
    client.subscribe(PUMP_MODE_TOPIC)
    client.subscribe(LIGHT_MODE_TOPIC)
    client.subscribe(MANUAL_PUMP_TOPIC)
    client.subscribe(MANUAL_LIGHT_TOPIC)
    client.subscribe(TARGET_LIGHT_TOPIC)
    client.subscribe(LIGHT_SCALE_TOPIC)
    print("Connected to MQTT Broker")
except Exception as e:
    print(f"Failed to connect to MQTT Broker: {e}")
    print("Running in offline mode.")

# Main Loop
while True:
    try:
        client.check_msg()  
    except Exception as e:
        print(f"MQTT Error: {e}")

    moisture = read_moisture()
    ldr_value = read_ldr()
    dht22_sensor.measure()
    temp = dht22_sensor.temperature()
    humidity = dht22_sensor.humidity()

    print(f"Moisture: {moisture}%, LDR: {ldr_value}, Temp: {temp}Â°C, Humidity: {humidity}%")

    if pump_mode == "auto" and moisture < 70:  
        pump_relay.on()
    else:
        if manual_pump:
            pump_relay.on()
        else:
            pump_relay.off()

    if light_mode == "auto":
        current_light = round(find_ldr_value(ldr_value))
        if current_light != target_light:
            adjust_brightness(target_light, current_light)
    else:
        if manual_light:
            np.fill((brightness, brightness, brightness))
            np.write()
        else:
            np.fill((0, 0, 0))
            np.write()


